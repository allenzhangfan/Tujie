apply plugin: 'com.android.application'

def releaseTime = new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.netposa.tujie"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true
        //ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath true
            }
        }
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
    }

    signingConfigs {
        robust {
            storeFile file("keystore.jks")
            storePassword "robust"
            keyAlias "robust"
            keyPassword "robust"
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "LOG_SHOW_HIGH_PRIORITY", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.robust
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "LOG_SHOW_HIGH_PRIORITY", "false"
            //Proguard
            minifyEnabled false
            //缩减resource文件
            shrinkResources false
            //是否zip对齐
            zipAlignEnabled false
            signingConfig signingConfigs.robust
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                def releaseName = "TuLingTong_V${defaultConfig.versionName}_build${releaseTime}.apk"
                output.outputFileName = releaseName
            } else if (variant.buildType.name == 'debug') {
                println(variant.buildType.name)
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //在host组件和component组件中都需要加入以下编译框架
    implementation rootProject.ext.dependencies["constraintlayout"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    // 导入 Dalvik 可执行文件分包支持库
    implementation rootProject.ext.dependencies["multidex"]
    annotationProcessor(rootProject.ext.dependencies["glide-compiler"]) {
        exclude module: 'jsr305'
    }
    //test
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
    if (isModule.toBoolean()) {
        implementation project(":CommonRes")
        implementation project(":CommonService")
        //图片库(图片预览)
        implementation project(':component_pic')
        //相机库
        implementation project(':component_cameraview')
    } else {
        //定位组件
        implementation project(':component_location')
        //mqtt组件
        implementation project(':component_mqtt')
        //登录
        implementation project(':component_login')
        //警情
        implementation project(':component_jq')
        //工作台
        implementation project(':component_gzt')
        //我的
        implementation project(':component_my')
        //视频监控
        implementation project(':component_spjk')
        //身份鉴别
        implementation project(':component_sfjb')
        //车辆查询
        implementation project(':component_clcx')
        //人脸图库
        implementation project(':component_rltk')
        //以图搜图
        implementation project(':component_ytst')
    }
}
